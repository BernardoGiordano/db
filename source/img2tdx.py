#!/usr/bin/env python3

import argparse
import os
import struct
from sys import argv, platform

if platform == "win32":
	if os.system("where /q grit") != 0:
		print("Fatal: GRIT must be in your PATH")
		exit()
else:
	if os.system("which -s grit") != 0:
		print("Fatal: GRIT must be in your PATH")
		exit()

gritArgs = "-ftr -fh!"

parser = argparse.ArgumentParser(description="Converts images with GRIT and packs them together")
parser.add_argument("tds", metavar="input.tds", type=str, help="tds to include from")
parser.add_argument("-o", "--output", metavar="output.tdx", type=str, help="file to output to", required=True)
parser.add_argument("--header", metavar="output.h", type=str, help="C header of image indexes")

args = parser.parse_args()

if os.path.exists(args.tds):
	with open(args.tds) as file:
		paths = file.read().split("\n")
else:
	print("Fatal: %s not found!" % args.tds)

if not os.path.exists(paths[0]):
	gritArgs += " " + paths[0]
	paths = paths[1:]

# Start with a hash to comment a file
paths = [args.tds.replace(os.path.basename(args.tds), item) for item in paths if not (item == "" or item[0] == "#")]

files = []

# Read files and convert to GRF
for path in paths:
	if path.endswith(".grf"):
		with open(path, "rb") as grf:
			files.append(grf.read())
	else:
		grfPath = path[:path.rfind('.')] + ".grf"
		if os.system('grit "%s" %s -o"%s"' % (path.replace("/", os.path.sep), gritArgs, grfPath)) == 0:
			with open(grfPath, "rb") as grf:
				files.append(grf.read())
			os.remove(grfPath)
		else:
			print("Fatal: Error while running GRIT")
			exit()

with open(args.output, "wb") as out:
	out.write(b".TDX")  # Format magic
	out.write(struct.pack("<L", len(files)))  # File count
	out.write(b"\x00" * 8)  # Padding

	# Position of data, starts after the file list
	position = 0x10 + len(files) * 8

	# Write file list
	for file in files:
		# Position of data, Size of data, Image width, Image height
		out.write(struct.pack("<LL", position, len(file)))
		position += len(file)

	# Write data
	for file in files:
		out.write(file)

if args.header:
	with open(args.header, "w") as header:
		header.write("/* Generated by %s */\n#pragma once\n\n" % argv[0])
		for i, file in enumerate(paths):
			header.write("#define sprites_%s_idx %d\n" % (os.path.splitext(os.path.basename(file))[0], i))
